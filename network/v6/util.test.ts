import { BITS, bits2HextetStr, bitsIsLOneRZero, bitsReverse, hextetStr2Bits, normalizeHextetStr, prefixNum2Bits, prefixStr2Bits } from "./util.js";

export { test };

async function test(): Promise<string[]> {
    const errors: string[] = [];

    {
        const msgPrefix = "BITS";
        if (BITS !== 340282366920938463463374607431768211455n) {
            const msg = msgPrefix + " => なんか値おかしい「" + BITS.toString(10) + "」";
            errors.push(msg);
        }
        if (BITS !== BigInt("0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111")) {
            const msg = msgPrefix + " => なんか値おかしい「" + BITS.toString(10) + "」";
            errors.push(msg);
        }
    }

    {
        const msgPrefix = "normalizeHextetStr";

        for (const data of <{ input: string, expect: string }[]>[
            { input: null, expect: undefined },
            { input: undefined, expect: undefined },
            { input: "z", expect: undefined },
            { input: "a:", expect: undefined },
            { input: "a", expect: undefined },
            { input: "0.0.0.0:", expect: undefined },
            { input: ":::", expect: undefined },
            { input: "::a::", expect: undefined },
            { input: "0:0:0:0:0:0:0:0:0", expect: undefined },
            { input: "0:0:0:0::0:0:0:0", expect: undefined },
            { input: "::", expect: "0:0:0:0:0:0:0:0" },
            { input: "a::", expect: "a:0:0:0:0:0:0:0" },
            { input: "::a", expect: "0:0:0:0:0:0:0:a" },
            { input: "a:a::", expect: "a:a:0:0:0:0:0:0" },
            { input: "::a:a", expect: "0:0:0:0:0:0:a:a" },
            { input: "::ffff:0.0.0.0", expect: "0:0:0:0:0:ffff:0:0" },
            { input: "::ffff:0.255.255.0", expect: "0:0:0:0:0:ffff:ff:ff00" },
            { input: "0.0.0.0:0.0.0.0:0.0.0.0:0.0.0.0", expect: "0:0:0:0:0:0:0:0" },
            { input: "0.255.255.255:0.0.0.0:0.0.0.255:255.255.255.255", expect: "ff:ffff:0:0:0:ff:ffff:ffff" },
            { input: "0:0:0:0:0:0:0:0", expect: "0:0:0:0:0:0:0:0" },
            { input: "0:0:0:0::0:0:0", expect: "0:0:0:0:0:0:0:0" },
            { input: "dead:beef::", expect: "dead:beef:0:0:0:0:0:0" },
        ]) {
            if (normalizeHextetStr(data.input) !== data.expect) {
                const msg = msgPrefix + " => 正規化失敗っぽい「" + data.input + "」「" + data.expect + "」が「" + normalizeHextetStr(data.input) + "」になっている";
                errors.push(msg);
            }
        }
    }

    {
        const msgPrefix = "HextetStr2Bits";

        for (const data of <{ input: string, expect: bigint }[]>[
            { input: null, expect: undefined },
            { input: undefined, expect: undefined },
            { input: "z", expect: undefined },
            { input: "a:", expect: undefined },
            { input: "a", expect: undefined },
            { input: "0.0.0.0:", expect: undefined },
            { input: ":::", expect: undefined },
            { input: "::a::", expect: undefined },
            { input: "0:0:0:0:0:0:0:0:0", expect: undefined },
            { input: "0:0:0:0::0:0:0:0", expect: undefined },
            { input: "::", expect: 0n },
            { input: "a::", expect: 51922968585348276285304963292200960n },
            { input: "::a", expect: 10n },
            { input: "a:a::", expect: 51923760866973418928680898731704320n },
            { input: "::a:a", expect: 655370n },
            { input: "::ffff:0.0.0.0", expect: 281470681743360n },
            { input: "::ffff:0.255.255.0", expect: 281470698520320n },
            { input: "0.0.0.0:0.0.0.0:0.0.0.0:0.0.0.0", expect: 0n },
            { input: "0.255.255.255:0.0.0.0:0.0.0.255:255.255.255.255", expect: 1329227916556753358639470566248022015n },
            { input: "0:0:0:0:0:0:0:0", expect: 0n },
            { input: "0:0:0:0::0:0:0", expect: 0n },
            { input: "dead:beef::", expect: 295990755014133383690938178081940045824n },
        ]) {
            if (hextetStr2Bits(data.input) !== data.expect) {
                const msg = msgPrefix + " => パース失敗っぽい「" + data.input + "」「" + data.expect + "」が「" + hextetStr2Bits(data.input) + "」になっている";
                errors.push(msg);
            }
        }
    }

    {
        const msgPrefix = "bits2HextetStr";

        for (const data of <{ expect: string, input: bigint }[]>[
            { input: null, expect: undefined },
            { input: undefined, expect: undefined },
            { input: 340282366920938463463374607431768211456n, expect: "0:0:0:0:0:0:0:0" },
            { input: 0n, expect: "0:0:0:0:0:0:0:0" },
            { input: 51922968585348276285304963292200960n, expect: "a:0:0:0:0:0:0:0" },
            { input: 10n, expect: "0:0:0:0:0:0:0:a" },
            { input: 51923760866973418928680898731704320n, expect: "a:a:0:0:0:0:0:0" },
            { input: 655370n, expect: "0:0:0:0:0:0:a:a" },
            { input: 281470681743360n, expect: "0:0:0:0:0:ffff:0:0" },
            { input: 281470698520320n, expect: "0:0:0:0:0:ffff:ff:ff00" },
            { input: 0n, expect: "0:0:0:0:0:0:0:0" },
            { input: 1329227916556753358639470566248022015n, expect: "ff:ffff:0:0:0:ff:ffff:ffff" },
            { input: 0n, expect: "0:0:0:0:0:0:0:0" },
            { input: 0n, expect: "0:0:0:0:0:0:0:0" },
            { input: 295990755014133383690938178081940045824n, expect: "dead:beef:0:0:0:0:0:0" },
            { input: -1n, expect: "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff" },
            { input: 340282366920938463463374607431768211455n, expect: "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff" },
        ]) {
            if (bits2HextetStr(data.input) !== data.expect) {
                const msg = msgPrefix + " => toString失敗っぽい「" + data.expect + "」「" + data.input + "」が「" + bits2HextetStr(data.input) + "」になっている";
                errors.push(msg);
            }
        }
    }

    {
        const msgPrefix = "bitsReverse";

        for (const data of <{ input: bigint, expect: bigint }[]>[
            { input: null, expect: undefined },
            { input: undefined, expect: undefined },
            { input: 340282366920938463463374607431768211455n, expect: 0n },
            { input: 0n, expect: 340282366920938463463374607431768211455n },
            { input: -1n, expect: 0n },
            {
                input: BigInt("0b01011100011101101010110111010000110100101100011111000110100000110000010100101010000101111110000111010101010101010101010101010101"),
                expect: BigInt("0b10100011100010010101001000101111001011010011100000111001011111001111101011010101111010000001111000101010101010101010101010101010")
            },
        ]) {
            if (bitsReverse(data.input) !== data.expect) {
                const msg = msgPrefix + " => 失敗っぽい「" + data.input.toString(2) + "」が「" + data.expect.toString(2) + "」じゃなくて「" + bitsReverse(data.input).toString(2) + "」になっている";
                errors.push(msg);
            }
        }
    }

    {
        const msgPrefix = "bitsIsLOneRZero";

        for (const data of <{ input: bigint, expect: Boolean }[]>[
            { input: null, expect: undefined },
            { input: undefined, expect: undefined },
            { input: BigInt("0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), expect: true },
            { input: BigInt("0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), expect: true },
            { input: BigInt("0b11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), expect: true },
            { input: BigInt("0b11111111111111110000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), expect: false },
            { input: BigInt("0b11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), expect: false },
            { input: BigInt("0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), expect: false },
            { input: BigInt("0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111"), expect: false },
        ]) {
            if (bitsIsLOneRZero(data.input) !== data.expect) {
                const msg = msgPrefix + " => 失敗っぽい「" + data.input.toString(2) + "」が「" + bitsIsLOneRZero(data.input) + "」になっている";
                errors.push(msg);
            }
        }
    }

    {
        const msgPrefix = "prefixNum2Bits";

        for (const data of <{ input: number, expect: bigint }[]>[
            { input: null, expect: undefined },
            { input: undefined, expect: undefined },
            { input: 128, expect: 340282366920938463463374607431768211455n },
            { input: 127, expect: 340282366920938463463374607431768211454n },
            { input: 126, expect: 340282366920938463463374607431768211452n },
            { input: 125, expect: 340282366920938463463374607431768211448n },
            { input: 124, expect: 340282366920938463463374607431768211440n },
            { input: 123, expect: 340282366920938463463374607431768211424n },
            { input: 122, expect: 340282366920938463463374607431768211392n },
            { input: 121, expect: 340282366920938463463374607431768211328n },
            { input: 120, expect: 340282366920938463463374607431768211200n },
            { input: 119, expect: 340282366920938463463374607431768210944n },
            { input: 118, expect: 340282366920938463463374607431768210432n },
            { input: 117, expect: 340282366920938463463374607431768209408n },
            { input: 116, expect: 340282366920938463463374607431768207360n },
            { input: 115, expect: 340282366920938463463374607431768203264n },
            { input: 114, expect: 340282366920938463463374607431768195072n },
            { input: 113, expect: 340282366920938463463374607431768178688n },
            { input: 112, expect: 340282366920938463463374607431768145920n },
            { input: 111, expect: 340282366920938463463374607431768080384n },
            { input: 110, expect: 340282366920938463463374607431767949312n },
            { input: 109, expect: 340282366920938463463374607431767687168n },
            { input: 108, expect: 340282366920938463463374607431767162880n },
            { input: 107, expect: 340282366920938463463374607431766114304n },
            { input: 106, expect: 340282366920938463463374607431764017152n },
            { input: 105, expect: 340282366920938463463374607431759822848n },
            { input: 104, expect: 340282366920938463463374607431751434240n },
            { input: 103, expect: 340282366920938463463374607431734657024n },
            { input: 102, expect: 340282366920938463463374607431701102592n },
            { input: 101, expect: 340282366920938463463374607431633993728n },
            { input: 100, expect: 340282366920938463463374607431499776000n },
            { input: 99, expect: 340282366920938463463374607431231340544n },
            { input: 98, expect: 340282366920938463463374607430694469632n },
            { input: 97, expect: 340282366920938463463374607429620727808n },
            { input: 96, expect: 340282366920938463463374607427473244160n },
            { input: 95, expect: 340282366920938463463374607423178276864n },
            { input: 94, expect: 340282366920938463463374607414588342272n },
            { input: 93, expect: 340282366920938463463374607397408473088n },
            { input: 92, expect: 340282366920938463463374607363048734720n },
            { input: 91, expect: 340282366920938463463374607294329257984n },
            { input: 90, expect: 340282366920938463463374607156890304512n },
            { input: 89, expect: 340282366920938463463374606882012397568n },
            { input: 88, expect: 340282366920938463463374606332256583680n },
            { input: 87, expect: 340282366920938463463374605232744955904n },
            { input: 86, expect: 340282366920938463463374603033721700352n },
            { input: 85, expect: 340282366920938463463374598635675189248n },
            { input: 84, expect: 340282366920938463463374589839582167040n },
            { input: 83, expect: 340282366920938463463374572247396122624n },
            { input: 82, expect: 340282366920938463463374537063024033792n },
            { input: 81, expect: 340282366920938463463374466694279856128n },
            { input: 80, expect: 340282366920938463463374325956791500800n },
            { input: 79, expect: 340282366920938463463374044481814790144n },
            { input: 78, expect: 340282366920938463463373481531861368832n },
            { input: 77, expect: 340282366920938463463372355631954526208n },
            { input: 76, expect: 340282366920938463463370103832140840960n },
            { input: 75, expect: 340282366920938463463365600232513470464n },
            { input: 74, expect: 340282366920938463463356593033258729472n },
            { input: 73, expect: 340282366920938463463338578634749247488n },
            { input: 72, expect: 340282366920938463463302549837730283520n },
            { input: 71, expect: 340282366920938463463230492243692355584n },
            { input: 70, expect: 340282366920938463463086377055616499712n },
            { input: 69, expect: 340282366920938463462798146679464787968n },
            { input: 68, expect: 340282366920938463462221685927161364480n },
            { input: 67, expect: 340282366920938463461068764422554517504n },
            { input: 66, expect: 340282366920938463458762921413340823552n },
            { input: 65, expect: 340282366920938463454151235394913435648n },
            { input: 64, expect: 340282366920938463444927863358058659840n },
            { input: 63, expect: 340282366920938463426481119284349108224n },
            { input: 62, expect: 340282366920938463389587631136930004992n },
            { input: 61, expect: 340282366920938463315800654842091798528n },
            { input: 60, expect: 340282366920938463168226702252415385600n },
            { input: 59, expect: 340282366920938462873078797073062559744n },
            { input: 58, expect: 340282366920938462282782986714356908032n },
            { input: 57, expect: 340282366920938461102191365996945604608n },
            { input: 56, expect: 340282366920938458741008124562122997760n },
            { input: 55, expect: 340282366920938454018641641692477784064n },
            { input: 54, expect: 340282366920938444573908675953187356672n },
            { input: 53, expect: 340282366920938425684442744474606501888n },
            { input: 52, expect: 340282366920938387905510881517444792320n },
            { input: 51, expect: 340282366920938312347647155603121373184n },
            { input: 50, expect: 340282366920938161231919703774474534912n },
            { input: 49, expect: 340282366920937859000464800117180858368n },
            { input: 48, expect: 340282366920937254537554992802593505280n },
            { input: 47, expect: 340282366920936045611735378173418799104n },
            { input: 46, expect: 340282366920933627760096148915069386752n },
            { input: 45, expect: 340282366920928792056817690398370562048n },
            { input: 44, expect: 340282366920919120650260773364972912640n },
            { input: 43, expect: 340282366920899777837146939298177613824n },
            { input: 42, expect: 340282366920861092210919271164587016192n },
            { input: 41, expect: 340282366920783720958463934897405820928n },
            { input: 40, expect: 340282366920628978453553262363043430400n },
            { input: 39, expect: 340282366920319493443731917294318649344n },
            { input: 38, expect: 340282366919700523424089227156869087232n },
            { input: 37, expect: 340282366918462583384803846881969963008n },
            { input: 36, expect: 340282366915986703306233086332171714560n },
            { input: 35, expect: 340282366911034943149091565232575217664n },
            { input: 34, expect: 340282366901131422834808523033382223872n },
            { input: 33, expect: 340282366881324382206242438634996236288n },
            { input: 32, expect: 340282366841710300949110269838224261120n },
            { input: 31, expect: 340282366762482138434845932244680310784n },
            { input: 30, expect: 340282366604025813406317257057592410112n },
            { input: 29, expect: 340282366287113163349259906683416608768n },
            { input: 28, expect: 340282365653287863235145205935065006080n },
            { input: 27, expect: 340282364385637263006915804438361800704n },
            { input: 26, expect: 340282361850336062550457001444955389952n },
            { input: 25, expect: 340282356779733661637539395458142568448n },
            { input: 24, expect: 340282346638528859811704183484516925440n },
            { input: 23, expect: 340282326356119256160033759537265639424n },
            { input: 22, expect: 340282285791300048856692911642763067392n },
            { input: 21, expect: 340282204661661634250011215853757923328n },
            { input: 20, expect: 340282042402384805036647824275747635200n },
            { input: 19, expect: 340281717883831146609921041119727058944n },
            { input: 18, expect: 340281068846723829756467474807685906432n },
            { input: 17, expect: 340279770772509196049560342183603601408n },
            { input: 16, expect: 340277174624079928635746076935438991360n },
            { input: 15, expect: 340271982327221393808117546439109771264n },
            { input: 14, expect: 340261597733504324152860485446451331072n },
            { input: 13, expect: 340240828546070184842346363461134450688n },
            { input: 12, expect: 340199290171201906221318119490500689920n },
            { input: 11, expect: 340116213421465348979261631549233168384n },
            { input: 10, expect: 339950059921992234495148655666698125312n },
            { input: 9, expect: 339617752923046005526922703901628039168n },
            { input: 8, expect: 338953138925153547590470800371487866880n },
            { input: 7, expect: 337623910929368631717566993311207522304n },
            { input: 6, expect: 334965454937798799971759379190646833152n },
            { input: 5, expect: 329648542954659136480144150949525454848n },
            { input: 4, expect: 319014718988379809496913694467282698240n },
            { input: 3, expect: 297747071055821155530452781502797185024n },
            { input: 2, expect: 255211775190703847597530955573826158592n },
            { input: 1, expect: 170141183460469231731687303715884105728n },
            { input: 0, expect: 0n },
            { input: 130, expect: undefined },
            { input: 129, expect: undefined },
            { input: -2, expect: undefined },
            { input: -1, expect: undefined },
        ]) {
            if (prefixNum2Bits(data.input) !== data.expect) {
                const msg = msgPrefix + " => 失敗っぽい「" + data.input + "」が「" + data.expect + "」じゃなく「" + prefixNum2Bits(data.input) + "」になっている";
                errors.push(msg);
            }
        }
    }

    {
        const msgPrefix = "prefixStr2Bits";

        for (const data of <{ input: string, expect: bigint }[]>[
            { input: null, expect: undefined },
            { input: undefined, expect: undefined },
            { input: "128", expect: 340282366920938463463374607431768211455n },
            { input: "127", expect: 340282366920938463463374607431768211454n },
            { input: "126", expect: 340282366920938463463374607431768211452n },
            { input: "125", expect: 340282366920938463463374607431768211448n },
            { input: "124", expect: 340282366920938463463374607431768211440n },
            { input: "123", expect: 340282366920938463463374607431768211424n },
            { input: "122", expect: 340282366920938463463374607431768211392n },
            { input: "121", expect: 340282366920938463463374607431768211328n },
            { input: "120", expect: 340282366920938463463374607431768211200n },
            { input: "119", expect: 340282366920938463463374607431768210944n },
            { input: "118", expect: 340282366920938463463374607431768210432n },
            { input: "117", expect: 340282366920938463463374607431768209408n },
            { input: "116", expect: 340282366920938463463374607431768207360n },
            { input: "115", expect: 340282366920938463463374607431768203264n },
            { input: "114", expect: 340282366920938463463374607431768195072n },
            { input: "113", expect: 340282366920938463463374607431768178688n },
            { input: "112", expect: 340282366920938463463374607431768145920n },
            { input: "111", expect: 340282366920938463463374607431768080384n },
            { input: "110", expect: 340282366920938463463374607431767949312n },
            { input: "109", expect: 340282366920938463463374607431767687168n },
            { input: "108", expect: 340282366920938463463374607431767162880n },
            { input: "107", expect: 340282366920938463463374607431766114304n },
            { input: "106", expect: 340282366920938463463374607431764017152n },
            { input: "105", expect: 340282366920938463463374607431759822848n },
            { input: "104", expect: 340282366920938463463374607431751434240n },
            { input: "103", expect: 340282366920938463463374607431734657024n },
            { input: "102", expect: 340282366920938463463374607431701102592n },
            { input: "101", expect: 340282366920938463463374607431633993728n },
            { input: "100", expect: 340282366920938463463374607431499776000n },
            { input: "99", expect: 340282366920938463463374607431231340544n },
            { input: "98", expect: 340282366920938463463374607430694469632n },
            { input: "97", expect: 340282366920938463463374607429620727808n },
            { input: "96", expect: 340282366920938463463374607427473244160n },
            { input: "95", expect: 340282366920938463463374607423178276864n },
            { input: "94", expect: 340282366920938463463374607414588342272n },
            { input: "93", expect: 340282366920938463463374607397408473088n },
            { input: "92", expect: 340282366920938463463374607363048734720n },
            { input: "91", expect: 340282366920938463463374607294329257984n },
            { input: "90", expect: 340282366920938463463374607156890304512n },
            { input: "89", expect: 340282366920938463463374606882012397568n },
            { input: "88", expect: 340282366920938463463374606332256583680n },
            { input: "87", expect: 340282366920938463463374605232744955904n },
            { input: "86", expect: 340282366920938463463374603033721700352n },
            { input: "85", expect: 340282366920938463463374598635675189248n },
            { input: "84", expect: 340282366920938463463374589839582167040n },
            { input: "83", expect: 340282366920938463463374572247396122624n },
            { input: "82", expect: 340282366920938463463374537063024033792n },
            { input: "81", expect: 340282366920938463463374466694279856128n },
            { input: "80", expect: 340282366920938463463374325956791500800n },
            { input: "79", expect: 340282366920938463463374044481814790144n },
            { input: "78", expect: 340282366920938463463373481531861368832n },
            { input: "77", expect: 340282366920938463463372355631954526208n },
            { input: "76", expect: 340282366920938463463370103832140840960n },
            { input: "75", expect: 340282366920938463463365600232513470464n },
            { input: "74", expect: 340282366920938463463356593033258729472n },
            { input: "73", expect: 340282366920938463463338578634749247488n },
            { input: "72", expect: 340282366920938463463302549837730283520n },
            { input: "71", expect: 340282366920938463463230492243692355584n },
            { input: "70", expect: 340282366920938463463086377055616499712n },
            { input: "69", expect: 340282366920938463462798146679464787968n },
            { input: "68", expect: 340282366920938463462221685927161364480n },
            { input: "67", expect: 340282366920938463461068764422554517504n },
            { input: "66", expect: 340282366920938463458762921413340823552n },
            { input: "65", expect: 340282366920938463454151235394913435648n },
            { input: "64", expect: 340282366920938463444927863358058659840n },
            { input: "63", expect: 340282366920938463426481119284349108224n },
            { input: "62", expect: 340282366920938463389587631136930004992n },
            { input: "61", expect: 340282366920938463315800654842091798528n },
            { input: "60", expect: 340282366920938463168226702252415385600n },
            { input: "59", expect: 340282366920938462873078797073062559744n },
            { input: "58", expect: 340282366920938462282782986714356908032n },
            { input: "57", expect: 340282366920938461102191365996945604608n },
            { input: "56", expect: 340282366920938458741008124562122997760n },
            { input: "55", expect: 340282366920938454018641641692477784064n },
            { input: "54", expect: 340282366920938444573908675953187356672n },
            { input: "53", expect: 340282366920938425684442744474606501888n },
            { input: "52", expect: 340282366920938387905510881517444792320n },
            { input: "51", expect: 340282366920938312347647155603121373184n },
            { input: "50", expect: 340282366920938161231919703774474534912n },
            { input: "49", expect: 340282366920937859000464800117180858368n },
            { input: "48", expect: 340282366920937254537554992802593505280n },
            { input: "47", expect: 340282366920936045611735378173418799104n },
            { input: "46", expect: 340282366920933627760096148915069386752n },
            { input: "45", expect: 340282366920928792056817690398370562048n },
            { input: "44", expect: 340282366920919120650260773364972912640n },
            { input: "43", expect: 340282366920899777837146939298177613824n },
            { input: "42", expect: 340282366920861092210919271164587016192n },
            { input: "41", expect: 340282366920783720958463934897405820928n },
            { input: "40", expect: 340282366920628978453553262363043430400n },
            { input: "39", expect: 340282366920319493443731917294318649344n },
            { input: "38", expect: 340282366919700523424089227156869087232n },
            { input: "37", expect: 340282366918462583384803846881969963008n },
            { input: "36", expect: 340282366915986703306233086332171714560n },
            { input: "35", expect: 340282366911034943149091565232575217664n },
            { input: "34", expect: 340282366901131422834808523033382223872n },
            { input: "33", expect: 340282366881324382206242438634996236288n },
            { input: "32", expect: 340282366841710300949110269838224261120n },
            { input: "31", expect: 340282366762482138434845932244680310784n },
            { input: "30", expect: 340282366604025813406317257057592410112n },
            { input: "29", expect: 340282366287113163349259906683416608768n },
            { input: "28", expect: 340282365653287863235145205935065006080n },
            { input: "27", expect: 340282364385637263006915804438361800704n },
            { input: "26", expect: 340282361850336062550457001444955389952n },
            { input: "25", expect: 340282356779733661637539395458142568448n },
            { input: "24", expect: 340282346638528859811704183484516925440n },
            { input: "23", expect: 340282326356119256160033759537265639424n },
            { input: "22", expect: 340282285791300048856692911642763067392n },
            { input: "21", expect: 340282204661661634250011215853757923328n },
            { input: "20", expect: 340282042402384805036647824275747635200n },
            { input: "19", expect: 340281717883831146609921041119727058944n },
            { input: "18", expect: 340281068846723829756467474807685906432n },
            { input: "17", expect: 340279770772509196049560342183603601408n },
            { input: "16", expect: 340277174624079928635746076935438991360n },
            { input: "15", expect: 340271982327221393808117546439109771264n },
            { input: "14", expect: 340261597733504324152860485446451331072n },
            { input: "13", expect: 340240828546070184842346363461134450688n },
            { input: "12", expect: 340199290171201906221318119490500689920n },
            { input: "11", expect: 340116213421465348979261631549233168384n },
            { input: "10", expect: 339950059921992234495148655666698125312n },
            { input: "9", expect: 339617752923046005526922703901628039168n },
            { input: "8", expect: 338953138925153547590470800371487866880n },
            { input: "7", expect: 337623910929368631717566993311207522304n },
            { input: "6", expect: 334965454937798799971759379190646833152n },
            { input: "5", expect: 329648542954659136480144150949525454848n },
            { input: "4", expect: 319014718988379809496913694467282698240n },
            { input: "3", expect: 297747071055821155530452781502797185024n },
            { input: "2", expect: 255211775190703847597530955573826158592n },
            { input: "01", expect: 170141183460469231731687303715884105728n },
            { input: "0", expect: 0n },
            { input: "00", expect: 0n },
            { input: "0000", expect: undefined },
            { input: "130", expect: undefined },
            { input: "129", expect: undefined },
            { input: "-2", expect: undefined },
            { input: "-1", expect: undefined },
            { input: "aaa", expect: undefined },
            { input: "11a", expect: undefined },
            { input: "a11", expect: undefined },
            { input: "1a1", expect: undefined },
        ]) {
            if (prefixStr2Bits(data.input) !== data.expect) {
                const msg = msgPrefix + " => 失敗っぽい「" + data.input + "」が「" + data.expect + "」じゃなく「" + prefixStr2Bits(data.input) + "」になっている";
                errors.push(msg);
            }
        }
    }

    return errors;
}
